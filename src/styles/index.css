:root {
  --padding-inline: 2rem;
  --padding-inline-half: 100% - (var(--padding-inline) * 2);
  --content-max-width: 80ch;
  --breakout-max-width: 90ch;
  --chuck-max-width: 110ch;

  --breakout-size: calc(
    (var(--breakout-max-width) - var(--content-max-width)) / 2
  );
  --chuck-size: calc((var(--chuck-max-width) - var(--content-max-width)) / 2);
}

* {
  min-width: 0;
  font: inherit;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

img,
video,
svg {
  max-width: 100%;
  height: auto;
  display: block;
}

body {
  margin: 0;
  min-height: 100dvh;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  text-wrap: balance;
}

p {
  text-wrap: pretty;
}

  .content-grid,
  .full-width {
    display: grid;
    grid-template-columns:
      [full-width-start] minmax(var(--padding-inline), 1fr)
      [max-size-start] minmax(0, var(--chuck-size))
      [breakout-start] minmax(0, var(--breakout-size))
      [content-start] min(var(--padding-inline-half), var(--content-max-width))
      [content-end] minmax(0, var(--breakout-size))
      [breakout-end] minmax(0, var(--chuck-size))
      [max-size-end] minmax(var(--padding-inline), 1fr)
      [full-width-end];
  }

  .content-grid > :not(.breakout, .full-width, .max-size),
  .full-width > :not(.breakout, .full-width, .max-size) {
    grid-column: content;
  }

  .content-grid > .breakout {
    grid-column: breakout;
  }

  .content-grid > .full-width {
    grid-column: full-width;
  }

  .content-grid > .max-size {
    grid-column: max-size;
  }
